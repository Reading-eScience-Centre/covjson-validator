#######################################################
# 
# JSONCheck.py
# Python implementation of the Class JSONCheck
# Generated by Enterprise Architect
# Created on:      25-Oct-2016 12:41:38
# Original author: Jane Lewis
# 
#######################################################
import json
from CovgValidator import CovgValidator
from CovgCollValidator import CovgCollValidator


def enum(**enums):
    return type('Enum', (), enums)


def loadfile(filename):
    """
    :param filename: full path/name of json file to load
    :return: dictionary containing json object
    """
    with open(filename) as file:
        return json.load(file)


class JSONCheck:
    """
    Load the JSON file to be checked, delegate to appropriate validation class depending on main type.
    """
    def __init__(self):
        """

        :return:
        """
        self.m_type_node = "type"
        self.m_covg_type = "Coverage"
        self.m_coll_type = "CoverageCollection"
        self.m_covg_validator = CovgValidator()
        self.m_covg_coll_validator = CovgCollValidator()

    def check_json(self, filename):
        """
        Checks for main object type of Coverage or CoverageCollection only at present.
        note: other types allowed: Domain, NdArray, TiledNdArray - these all appear within a coverage usually

        :param filename: full path/name of json file to validate
        :return: none
        :raise: Exceptions TBD
        """
        # read the JSON file to be checked
        json_data = self.loadfile(filename)
        # check the resulting dict based on top-level nodes - one or other of of main types above
        if json_data.get(self.m_type_node) == self.m_covg_type:
            # it's a normal coverage so pass to appropriate validator
            self.m_covg_validator.validate_json(json_data)
        elif json_data.get(self.m_type_node) == self.m_coll_type:
            # it's a coverage collection so pass to appropriate validator
            self.m_covg_coll_validator.validate_json(json_data)
        else:
            # it's neither so raise error
            raise jsonschema.SchemaError("File is not a coverage or coverage collection.")


